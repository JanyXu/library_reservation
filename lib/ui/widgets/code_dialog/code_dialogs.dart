import 'dart:async';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:library_reservation/core/service/config/color_config.dart';import 'package:library_reservation/core/service/utils/assets.dart';import 'package:library_reservation/core/service/utils/common.dart';import 'package:library_reservation/core/service/utils/manager_utils.dart';import 'dart:math' as math;import '../../../core/model/scan_result_entity.dart';import '../dialog_listener.dart';import 'code_dialogs_main.dart';class SCCodeDialogWidget extends StatefulWidget {  static const String routeString = '/dialog';  String test='';  OnDialogClickListener callBack;  ScanResultEntity scanResultEntity;  SCCodeDialogWidget(this.callBack,this.scanResultEntity);  //const SCCodeDialogWidget({Key? key}) : super(key: key);  @override  State<SCCodeDialogWidget> createState() => _SCCodeDialogWidgetState(scanResultEntity);}class _SCCodeDialogWidgetState extends State<SCCodeDialogWidget> {  ScanResultEntity scanResultEntity;  _SCCodeDialogWidgetState(this.scanResultEntity);  @override  void initState() {    // TODO: implement initState    super.initState();    //print('dic_code-------------$dicValue');    // SystemChrome.setPreferredOrientations(DeviceOrientation.values);  }  @override  Widget build(BuildContext context) {    String version = ManagerUtils.instance.getDicVersion(Common.dic_code)!;    if (null == (ManagerUtils.instance.getDicVersion(Common.dic_code))) return Container();    // String dicValue =    //     ManagerUtils.instance.getDicValue('${Common.dic_code}$version')!;    return (null != ManagerUtils.instance.getDicValue('${Common.dic_code}$version'))        ? Scaffold(            backgroundColor: ColorConfig.colorB3000000,            body: Stack(              children: [                // Image.asset(Assets.ground,fit: BoxFit.cover,),                _buildContent(context)              ],            ))        : Container();  }  Widget buildAngleScanStack(Widget widget, bool landscape) {    //- math.pi / 4 向左旋转45度    return Transform.rotate(      angle: landscape ? (-math.pi / 2) : 0,      child: widget,    );  }  Widget _buildContent(BuildContext context) {    double width = MediaQuery.of(context).size.width;    double height = MediaQuery.of(context).size.height;    return Container(      width: double.infinity,      height: double.infinity,      child: Column(        mainAxisAlignment: MainAxisAlignment.center,        crossAxisAlignment: CrossAxisAlignment.center,        children: [          SCDialogsHeadWidget(widget.callBack),          // _buildUnKnowWidget(),          scanResultEntity.resultDicCode == "other" ? _buildUnKnowWidget():Container(            width: width > height ? 607 : 322,            height: width > height ? 257 : 574,            child: SCDialogsDataWidget(isHorizontal: width > height,scanResultEntity: scanResultEntity,),          ),        ],      ),    );  }  Widget _buildUnKnowWidget() {    return Container(      width: 321,      height: 266,      child: Stack(        children: [          Image.asset(            Assets.bg_un_know,            width: 321,            height: 266,            fit: BoxFit.cover,          ),          Container(            width: double.infinity,            padding: EdgeInsets.all(25),            child: Column(              mainAxisAlignment: MainAxisAlignment.center,              children: [                SizedBox(height: 3),                _buildUnKnownHeadWidget(),                SizedBox(height: 14),                Container(                  width: double.infinity,                  height: 120,                  child: Text(                    scanResultEntity.certNo!,                    style: TextStyleConfig.textFFFFFF_12.copyWith(height: 2),                    maxLines: 5,                    overflow: TextOverflow.ellipsis,                  )                )              ],            ),          )        ],      ),    );  }  Widget _buildUnKnownHeadWidget(){    String resultDicCode = 'other';    return Container(      height: 30,      child: Row(        mainAxisAlignment: MainAxisAlignment.center,        children: [          Image.asset(            Utils.getTotalResultLeftImage(resultDicCode),            width: 40,            height: 10,          ),          SizedBox(width: 9),          Text(              scanResultEntity.userName!,              style: TextStyleConfig.text_18_bold.copyWith(color: ColorConfig.colorFFFFFF)          ),          SizedBox(width: 9),          Image.asset(            Utils.getTotalResultRightImage(resultDicCode),            width: 40,            height: 10,          ),        ],      ),    );  }  @override  Future<void> dispose() async {    // SystemChrome.setPreferredOrientations([    //   DeviceOrientation.portraitUp,    //   DeviceOrientation.portraitDown    //   //DeviceOrientation.landscapeRight,    // ]).then((value) {      super.dispose();    //});  }}class SCDialogsHeadWidget extends StatefulWidget {  //const SCDialogsHeadWidget({Key? key}) : super(key: key);  OnDialogClickListener callBack;  SCDialogsHeadWidget(this.callBack);  @override  _SCDialogsHeadWidgetState createState() => _SCDialogsHeadWidgetState();}class _SCDialogsHeadWidgetState extends State<SCDialogsHeadWidget> {  late Timer _timer;  int _start = ManagerUtils.instance.getRate();  @override  void initState() {    // TODO: implement initState    super.initState();    startTimer();  }  @override  Widget build(BuildContext context) {    double width = MediaQuery.of(context).size.width;    double height = MediaQuery.of(context).size.height;    return Container(      width: width > height ? 607 : 322,      height: 25,      child: Row(        mainAxisAlignment: MainAxisAlignment.end,        children: [          Text(            '$_start秒后关闭',            style: TextStyleConfig.textFFFFFF_12,          ),          SizedBox(            width: 7.5,          ),          GestureDetector(            child: Image.asset(              Assets.close,              width: 24,              height: 24,              fit: BoxFit.cover,            ),            onTap: () {              widget.callBack.onCancel();              Navigator.of(context).pop();            },          ),          SizedBox(            width: 8,          )        ],      ),    );  }  void startTimer() {    const oneSec = const Duration(seconds: 1); //间隔1秒    _timer = new Timer.periodic(      //每秒调用一次      oneSec,      (Timer timer) => setState(        () {          if (_start < 1) {            //如果小于1则停止倒计时            timer.cancel();            widget.callBack.onCancel();             Navigator.of(context).pop();          } else {            _start = _start - 1; //自减一          }        },      ),    );  }  @override  void dispose() {    // TODO: implement dispose    super.dispose();    _timer.cancel();  }}