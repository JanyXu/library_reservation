import 'dart:convert';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:library_reservation/core/service/config/color_config.dart';import 'package:library_reservation/core/service/utils/assets.dart';import 'package:library_reservation/core/model/scan_result_entity.dart';import 'package:library_reservation/core/service/utils/manager_utils.dart';import 'package:library_reservation/core/model/dic_data_value_entity.dart';import 'data_code.dart';import 'data_common.dart';class SCDialogsDataWidget extends StatelessWidget {  final bool isHorizontal;  const SCDialogsDataWidget({    Key? key,    this.isHorizontal = false}) : super(key: key);  static Future<ScanResultEntity> _getData() async {    final jsonStr = await rootBundle.loadString('assets/voice/Category.json');    final resData = jsonDecode(jsonStr);    final data = ScanResultEntity().fromJson(resData);    return data;  }  @override  Widget build(BuildContext context) {    return FutureBuilder<ScanResultEntity>(      future: _getData(),      builder: (ctx , snapshot){        if (!snapshot.hasData) return SizedBox(height: 0);        final resultEntity = snapshot.data!;        return Center(            child: Stack(              children: [                _buildGroundWidget(isHorizontal),                isHorizontal ? _buildHorizontalWidget(resultEntity):_buildVerticalWidget(resultEntity)              ],            )        );      },    );    // if (resultEntity == null) return Container();    // print('getDicVersion =============${ManagerUtils.instance.getDicVersion("ScanCodeAssistantExplain")}');    // print('getDicValue2===========${ManagerUtils.instance.getDicData()!.scanCodeResult!.cqqrcode!.lastRnaResult}');    // DicDataValueScanCodeResultCqqrcode code = ManagerUtils.instance.getDicData()!.scanCodeResult!.cqqrcode!;    // print('vaccinationStatus====${code);    // print('vaccinationStatusKey ===== ${resultEntity!.vaccinationStatus}');    // print('vaccinationStatus====${code.vaccinationStatus!['1']}');    // print('vaccinationPlusStatus====${ManagerUtils.instance.getVaccinationPlusStatus('${resultEntity!.vaccinationPlusStatus}')}');    // print('lastRNAResult====${ManagerUtils.instance.getLastRnaResult('${resultEntity!.lastRNAResult}')}');    // return Center(    //   child: Stack(    //     children: [    //       _buildGroundWidget(isHorizontal),    //       isHorizontal ? _buildHorizontalWidget():_buildVerticalWidget()    //     ],    //   )    // );  }  Widget _buildGroundWidget(bool isHorizontal){    return Image.asset(      isHorizontal ? Assets.bg_horizontal : Assets.bg_vertical,      width: isHorizontal ? 607 : 322,      height: isHorizontal ? 257 : 574,      fit: BoxFit.cover,    );  }  Widget _buildHorizontalWidget(ScanResultEntity? resultEntity){    if (ManagerUtils.instance.getDicVersion("ScanCodeAssistantExplain961266405003182080") == null){      return Container();    }    return Row(      mainAxisAlignment: MainAxisAlignment.spaceBetween,      children: [         SCDialogsDataCodeWidget(isHorizontal: true),        Column(          children: _buildCommonWidget(resultEntity)        )      ],    );  }  Widget _buildVerticalWidget(ScanResultEntity? resultEntity){    if (ManagerUtils.instance.getDicVersion("ScanCodeAssistantExplain961266405003182080") == null){      return Container();    }    return Column(      mainAxisAlignment: MainAxisAlignment.spaceBetween,      children: [        SCDialogsDataCodeWidget(),        Row(          children: _buildCommonWidget(resultEntity)        )      ],    );  }  List<Widget> _buildCommonWidget(ScanResultEntity? resultEntity){    return [      SCDialogsDataCommonWidget(        title: '新冠疫苗',        imageAsset: Assets.vaccine,        name:  ManagerUtils.instance.getVaccinationStatus(resultEntity!.vaccinationStatus.toString()),        subName: ManagerUtils.instance.getVaccinationPlusStatus(resultEntity.vaccinationPlusStatus.toString()),      ),      SCDialogsDataCommonWidget(        title: '核酸检测',        imageAsset: Assets.detection,        name: ManagerUtils.instance.getLastRnaResult(resultEntity.lastRNAResult.toString()),        color: ManagerUtils.instance.getLastRnaResultColor(resultEntity.lastRNAResult),        subName: resultEntity.lastRNATime,      )    ];  }}