import 'package:flutter/cupertino.dart';import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:library_reservation/core/service/config/api_config.dart';import 'package:library_reservation/core/service/config/color_config.dart';import 'package:library_reservation/core/service/network/network.dart';import 'package:library_reservation/core/service/utils/manager_utils.dart';import 'package:library_reservation/provide_model/scan_speed_provide_model.dart';import 'package:library_reservation/ui/pages/scan/scan_page.dart';import 'package:library_reservation/ui/pages/webview/setting_page.dart';import 'package:library_reservation/ui/widgets/code_dialog/code_dialogs.dart';import 'package:library_reservation/ui/widgets/dialog_listener.dart';import 'package:permission_handler/permission_handler.dart';import 'dart:math' as math;import '../scan/code_scan.dart';import '../../widgets/dialog.dart';class HomePage extends StatefulWidget {  static const String routeString = '/';  const HomePage({Key? key}) : super(key: key);  @override  State<HomePage> createState() => _HomePageState();}class _HomePageState extends State<HomePage> {  @override  void initState() {    // TODO: implement initState    super.initState();    print('initState');    //OrientationPlugin.forceOrientation(DeviceOrientation.portraitUp);    SystemChrome.setPreferredOrientations([      DeviceOrientation.portraitUp,      DeviceOrientation.portraitDown      //DeviceOrientation.landscapeRight,    ]);    //SystemChrome.setPreferredOrientations(DeviceOrientation.values);  }  @override  void didChangeDependencies() {    // TODO: implement didChangeDependencies    super.didChangeDependencies();    print('didChangeDependencies');  }  @override  void didUpdateWidget(covariant HomePage oldWidget) {    // TODO: implement didUpdateWidget    super.didUpdateWidget(oldWidget);    print('didUpdateWidget');  }  @override  Widget build(BuildContext context) {    print('build-------Test');   // _getCategoryData();    return ClipRect(child: Container(      decoration: BoxDecoration(          image: DecorationImage(            image: AssetImage('assets/images/main_ground.png'),            fit: BoxFit.cover,          )),      child:  HomeDefaultPage()        //   OrientationBuilder(        //     builder: (BuildContext context, Orientation orientation) {        //   double width = MediaQuery.of(context).size.width;        //   double height = MediaQuery.of(context).size.height;        //   bool portraitFlag =        //       orientation == Orientation.landscape ? true : false;        //   print('dssssssssssssssssssss========$width');        //   return HomeDefaultPage();//: ScanPage(true);        //   // return buildScanStack(vm, context);        // });    ));  }    Widget buildAngleScanStack(Widget widget,bool landscape) {    //- math.pi / 4 向左旋转45度    return Transform.rotate(      angle: landscape? (-math.pi/2):0,      child: widget,    );  }  static Future<dynamic> _getCategoryData() async {    Map<String, dynamic> map = {};    final result =    await HttpUtil.instance.get(ApiConfig.category, parameters: map);    print(result);    return result;  }}class HomeDefaultPage extends StatefulWidget {  const HomeDefaultPage({    Key? key,  }) : super(key: key);  @override  State<HomeDefaultPage> createState() => _HomeDefaultPageState();}class _HomeDefaultPageState extends State<HomeDefaultPage> implements OnDialogClickListener{  // ScanResult? _scanResult;  // Future<void> scan(BuildContext context) async {  //   _scanResult = await FlutterHmsScanKit.scan;  //  // _openAlertDialog(context);  //   //await Future.delayed(Duration(seconds: 2));  //   SystemChrome.setPreferredOrientations(DeviceOrientation.values).then((value) {  //     Navigator.of(context).pushNamed(SCCodeDialogWidget.routeString);  //   });  //   //  //  // }  bool dialogFlag = false;  @override  Widget build(BuildContext context) {    return Scaffold(        extendBodyBehindAppBar: true,        backgroundColor: Colors.transparent, //把scaffold的背景色改成透明        appBar: AppBar(          elevation: 0,          centerTitle: true,          backgroundColor: Colors.transparent,          //把appbar的背景色改成透明          // elevation: 0,//appbar的阴影          title: Text("扫码助手",              style: TextStyleConfig.textFFFFFF_14_bold),          actions: [            GestureDetector(              child: Container(                padding: EdgeInsets.symmetric(horizontal: 16),                child: Icon(                  Icons.settings,                  color: Colors.white,                ),              ),              onTap: () {                //跳转到设置                _starSettring(context);              },            )          ],        ),        body: Center(            child: Column(              crossAxisAlignment: CrossAxisAlignment.stretch,              mainAxisSize: MainAxisSize.min,              children: [                Container(                  height: 470,                    margin: EdgeInsets.symmetric(horizontal: 16),                    padding: EdgeInsets.only(top: 157,bottom: 40,),                    decoration: BoxDecoration(                        image: DecorationImage(                          image: AssetImage(                            'assets/images/main_middle_head_ground.png',                          ),                          fit: BoxFit.fill,                        )),                    child: Column(mainAxisSize: MainAxisSize.min, children: [                      Expanded(                        child: Image(                            image: AssetImage('assets/images/main_scan_ground.png')),                      ),                                            // Consumer<TestProviderModel>(builder: (ctx, vm, child) {                      //   return                          MaterialButton(                          child: Image(                            image: AssetImage('assets/images/main_scan_button.png'),                          ),                          onPressed: () {                            _starScan(context);                            print('onPressed');                            //vm.home_defult = false;                            //scan(context);                            //_openAlertDialog(context);                            // print('dd3');                            // Navigator.push(context, MaterialPageRoute(builder: (_) {                            //   return ScanPage();                            // }));                          },                      //   );                      // }                      ),                    ])),                Container(                  margin: EdgeInsets.symmetric(horizontal: 16),                  padding: EdgeInsets.only(left: 28,right: 28,top: 16,bottom: 16),                  decoration: BoxDecoration(                      image: DecorationImage(                        image: AssetImage('assets/images/main_bottom_ground.png'),                        fit: BoxFit.fill,                      )),                  child: Column(                    crossAxisAlignment: CrossAxisAlignment.start,                    children: [                      Text('注意事项',style:TextStyleConfig.textFFFFFF_14_bold ,),                      SizedBox(height: 12,),                      Text(Utils.getNoticeText()!,style: TextStyleConfig.textFFFFFF_12,),                    ],                  )                )              ],            )        )    );  }  void _starSettring(BuildContext context){    if (ManagerUtils.instance.getSeriesNumber()!.length == 0){      _openAlertDialog(context);      return;    }    Navigator.of(context).pushNamed(SettingPage.routeString);  }  void _starScan(BuildContext context){    if (ManagerUtils.instance.getSeriesNumber()!.length == 0){      _openAlertDialog(context);      return;    }    requestCalendarPermission().then((value) {      Navigator.of(context).push(        MaterialPageRoute(builder: (context) => CodeScannerExample()),      );    });  }  Future _openAlertDialog(BuildContext context) async {    return showDialog(      context: context,      barrierDismissible: false,      builder: (BuildContext context) {        return SCSerialDialog(this);      },    );  }  @override  void onCancel() {    // TODO: implement onCancel    dialogFlag = false;  }  @override  void onOk() {    // TODO: implement onOk  }  Future<bool> requestCalendarPermission() async {    //获取当前的权限    var status = await Permission.camera.status;    if (status == PermissionStatus.granted) {//已经授权      return true;    } else {      //未授权则发起一次申请      status = await Permission.camera.request();      if (status == PermissionStatus.granted) {        return true;      } else {        return false;      }    }  }}