// ignore_for_file: non_constant_identifier_names// ignore_for_file: camel_case_types// ignore_for_file: prefer_single_quotes// This file is automatically generated. DO NOT EDIT, all your changes would be lost.import 'package:library_reservation/core/model/dic_data_entity.dart';import 'package:library_reservation/generated/json/dic_data_entity_helper.dart';import 'package:library_reservation/core/model/scan_result_entity.dart';import 'package:library_reservation/generated/json/scan_result_entity_helper.dart';import 'package:library_reservation/core/model/dic_data_value_entity.dart';import 'package:library_reservation/generated/json/dic_data_value_entity_helper.dart';class JsonConvert<T> {	T fromJson(Map<String, dynamic> json) {		return _getFromJson<T>(runtimeType, this, json);	}  Map<String, dynamic> toJson() {		return _getToJson<T>(runtimeType, this);  }  static _getFromJson<T>(Type type, data, json) {    switch (type) {			case DicDataEntity:				return dicDataEntityFromJson(data as DicDataEntity, json) as T;			case ScanResultEntity:				return scanResultEntityFromJson(data as ScanResultEntity, json) as T;			case DicDataValueEntity:				return dicDataValueEntityFromJson(data as DicDataValueEntity, json) as T;			case DicDataValueScanCodeResult:				return dicDataValueScanCodeResultFromJson(data as DicDataValueScanCodeResult, json) as T;			case DicDataValueScanCodeResultCqqrcode:				return dicDataValueScanCodeResultCqqrcodeFromJson(data as DicDataValueScanCodeResultCqqrcode, json) as T;			case DicDataValueScanCodeResultCqqrcodeTotalResult:				return dicDataValueScanCodeResultCqqrcodeTotalResultFromJson(data as DicDataValueScanCodeResultCqqrcodeTotalResult, json) as T;			case DicDataValueScanCodeResultCqqrcodeTotalResultSafe:				return dicDataValueScanCodeResultCqqrcodeTotalResultSafeFromJson(data as DicDataValueScanCodeResultCqqrcodeTotalResultSafe, json) as T;			case DicDataValueScanCodeResultCqqrcodeTotalResultRisky:				return dicDataValueScanCodeResultCqqrcodeTotalResultRiskyFromJson(data as DicDataValueScanCodeResultCqqrcodeTotalResultRisky, json) as T;			case DicDataValueScanCodeResultCqqrcodeTotalResultOther:				return dicDataValueScanCodeResultCqqrcodeTotalResultOtherFromJson(data as DicDataValueScanCodeResultCqqrcodeTotalResultOther, json) as T;			case DicDataValueScanCodeResultCqqrcodeHealthStatus:				return dicDataValueScanCodeResultCqqrcodeHealthStatusFromJson(data as DicDataValueScanCodeResultCqqrcodeHealthStatus, json) as T;			case DicDataValueScanCodeResultCqqrcodeHealthStatus1:				return dicDataValueScanCodeResultCqqrcodeHealthStatus1FromJson(data as DicDataValueScanCodeResultCqqrcodeHealthStatus1, json) as T;			case DicDataValueScanCodeResultCqqrcodeHealthStatus2:				return dicDataValueScanCodeResultCqqrcodeHealthStatus2FromJson(data as DicDataValueScanCodeResultCqqrcodeHealthStatus2, json) as T;			case DicDataValueScanCodeResultCqqrcodeHealthStatus3:				return dicDataValueScanCodeResultCqqrcodeHealthStatus3FromJson(data as DicDataValueScanCodeResultCqqrcodeHealthStatus3, json) as T;			case DicDataValueScanCodeResultCqqrcodeHealthStatus99:				return dicDataValueScanCodeResultCqqrcodeHealthStatus99FromJson(data as DicDataValueScanCodeResultCqqrcodeHealthStatus99, json) as T;			case DicDataValueScanCodeResultCqqrcodeVaccinationStatus:				return dicDataValueScanCodeResultCqqrcodeVaccinationStatusFromJson(data as DicDataValueScanCodeResultCqqrcodeVaccinationStatus, json) as T;			case DicDataValueScanCodeResultCqqrcodeVaccinationPlusStatus:				return dicDataValueScanCodeResultCqqrcodeVaccinationPlusStatusFromJson(data as DicDataValueScanCodeResultCqqrcodeVaccinationPlusStatus, json) as T;			case DicDataValueScanCodeResultCqqrcodeLastRnaResult:				return dicDataValueScanCodeResultCqqrcodeLastRnaResultFromJson(data as DicDataValueScanCodeResultCqqrcodeLastRnaResult, json) as T;			case DicDataValueScanCodeResultCqqrcodeTravelStatus:				return dicDataValueScanCodeResultCqqrcodeTravelStatusFromJson(data as DicDataValueScanCodeResultCqqrcodeTravelStatus, json) as T;			case DicDataValueScanCodeResultCqqrcodeTravelStatus1:				return dicDataValueScanCodeResultCqqrcodeTravelStatus1FromJson(data as DicDataValueScanCodeResultCqqrcodeTravelStatus1, json) as T;			case DicDataValueScanCodeResultCqqrcodeTravelStatus2:				return dicDataValueScanCodeResultCqqrcodeTravelStatus2FromJson(data as DicDataValueScanCodeResultCqqrcodeTravelStatus2, json) as T;			case DicDataValueScanCodeResultCqqrcodeTravelStatus99:				return dicDataValueScanCodeResultCqqrcodeTravelStatus99FromJson(data as DicDataValueScanCodeResultCqqrcodeTravelStatus99, json) as T;    }    return data as T;  }  static _getToJson<T>(Type type, data) {		switch (type) {			case DicDataEntity:				return dicDataEntityToJson(data as DicDataEntity);			case ScanResultEntity:				return scanResultEntityToJson(data as ScanResultEntity);			case DicDataValueEntity:				return dicDataValueEntityToJson(data as DicDataValueEntity);			case DicDataValueScanCodeResult:				return dicDataValueScanCodeResultToJson(data as DicDataValueScanCodeResult);			case DicDataValueScanCodeResultCqqrcode:				return dicDataValueScanCodeResultCqqrcodeToJson(data as DicDataValueScanCodeResultCqqrcode);			case DicDataValueScanCodeResultCqqrcodeTotalResult:				return dicDataValueScanCodeResultCqqrcodeTotalResultToJson(data as DicDataValueScanCodeResultCqqrcodeTotalResult);			case DicDataValueScanCodeResultCqqrcodeTotalResultSafe:				return dicDataValueScanCodeResultCqqrcodeTotalResultSafeToJson(data as DicDataValueScanCodeResultCqqrcodeTotalResultSafe);			case DicDataValueScanCodeResultCqqrcodeTotalResultRisky:				return dicDataValueScanCodeResultCqqrcodeTotalResultRiskyToJson(data as DicDataValueScanCodeResultCqqrcodeTotalResultRisky);			case DicDataValueScanCodeResultCqqrcodeTotalResultOther:				return dicDataValueScanCodeResultCqqrcodeTotalResultOtherToJson(data as DicDataValueScanCodeResultCqqrcodeTotalResultOther);			case DicDataValueScanCodeResultCqqrcodeHealthStatus:				return dicDataValueScanCodeResultCqqrcodeHealthStatusToJson(data as DicDataValueScanCodeResultCqqrcodeHealthStatus);			case DicDataValueScanCodeResultCqqrcodeHealthStatus1:				return dicDataValueScanCodeResultCqqrcodeHealthStatus1ToJson(data as DicDataValueScanCodeResultCqqrcodeHealthStatus1);			case DicDataValueScanCodeResultCqqrcodeHealthStatus2:				return dicDataValueScanCodeResultCqqrcodeHealthStatus2ToJson(data as DicDataValueScanCodeResultCqqrcodeHealthStatus2);			case DicDataValueScanCodeResultCqqrcodeHealthStatus3:				return dicDataValueScanCodeResultCqqrcodeHealthStatus3ToJson(data as DicDataValueScanCodeResultCqqrcodeHealthStatus3);			case DicDataValueScanCodeResultCqqrcodeHealthStatus99:				return dicDataValueScanCodeResultCqqrcodeHealthStatus99ToJson(data as DicDataValueScanCodeResultCqqrcodeHealthStatus99);			case DicDataValueScanCodeResultCqqrcodeVaccinationStatus:				return dicDataValueScanCodeResultCqqrcodeVaccinationStatusToJson(data as DicDataValueScanCodeResultCqqrcodeVaccinationStatus);			case DicDataValueScanCodeResultCqqrcodeVaccinationPlusStatus:				return dicDataValueScanCodeResultCqqrcodeVaccinationPlusStatusToJson(data as DicDataValueScanCodeResultCqqrcodeVaccinationPlusStatus);			case DicDataValueScanCodeResultCqqrcodeLastRnaResult:				return dicDataValueScanCodeResultCqqrcodeLastRnaResultToJson(data as DicDataValueScanCodeResultCqqrcodeLastRnaResult);			case DicDataValueScanCodeResultCqqrcodeTravelStatus:				return dicDataValueScanCodeResultCqqrcodeTravelStatusToJson(data as DicDataValueScanCodeResultCqqrcodeTravelStatus);			case DicDataValueScanCodeResultCqqrcodeTravelStatus1:				return dicDataValueScanCodeResultCqqrcodeTravelStatus1ToJson(data as DicDataValueScanCodeResultCqqrcodeTravelStatus1);			case DicDataValueScanCodeResultCqqrcodeTravelStatus2:				return dicDataValueScanCodeResultCqqrcodeTravelStatus2ToJson(data as DicDataValueScanCodeResultCqqrcodeTravelStatus2);			case DicDataValueScanCodeResultCqqrcodeTravelStatus99:				return dicDataValueScanCodeResultCqqrcodeTravelStatus99ToJson(data as DicDataValueScanCodeResultCqqrcodeTravelStatus99);			}			return data as T;		}  //Go back to a single instance by type	static _fromJsonSingle<M>( json) {		String type = M.toString();		if(type == (DicDataEntity).toString()){			return DicDataEntity().fromJson(json);		}	else if(type == (ScanResultEntity).toString()){			return ScanResultEntity().fromJson(json);		}	else if(type == (DicDataValueEntity).toString()){			return DicDataValueEntity().fromJson(json);		}	else if(type == (DicDataValueScanCodeResult).toString()){			return DicDataValueScanCodeResult().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcode).toString()){			return DicDataValueScanCodeResultCqqrcode().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeTotalResult).toString()){			return DicDataValueScanCodeResultCqqrcodeTotalResult().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeTotalResultSafe).toString()){			return DicDataValueScanCodeResultCqqrcodeTotalResultSafe().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeTotalResultRisky).toString()){			return DicDataValueScanCodeResultCqqrcodeTotalResultRisky().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeTotalResultOther).toString()){			return DicDataValueScanCodeResultCqqrcodeTotalResultOther().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeHealthStatus).toString()){			return DicDataValueScanCodeResultCqqrcodeHealthStatus().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeHealthStatus1).toString()){			return DicDataValueScanCodeResultCqqrcodeHealthStatus1().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeHealthStatus2).toString()){			return DicDataValueScanCodeResultCqqrcodeHealthStatus2().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeHealthStatus3).toString()){			return DicDataValueScanCodeResultCqqrcodeHealthStatus3().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeHealthStatus99).toString()){			return DicDataValueScanCodeResultCqqrcodeHealthStatus99().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeVaccinationStatus).toString()){			return DicDataValueScanCodeResultCqqrcodeVaccinationStatus().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeVaccinationPlusStatus).toString()){			return DicDataValueScanCodeResultCqqrcodeVaccinationPlusStatus().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeLastRnaResult).toString()){			return DicDataValueScanCodeResultCqqrcodeLastRnaResult().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeTravelStatus).toString()){			return DicDataValueScanCodeResultCqqrcodeTravelStatus().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeTravelStatus1).toString()){			return DicDataValueScanCodeResultCqqrcodeTravelStatus1().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeTravelStatus2).toString()){			return DicDataValueScanCodeResultCqqrcodeTravelStatus2().fromJson(json);		}	else if(type == (DicDataValueScanCodeResultCqqrcodeTravelStatus99).toString()){			return DicDataValueScanCodeResultCqqrcodeTravelStatus99().fromJson(json);		}			return null;	}  //list is returned by type	static M _getListChildType<M>(List data) {		if(<DicDataEntity>[] is M){			return data.map<DicDataEntity>((e) => DicDataEntity().fromJson(e)).toList() as M;		}	else if(<ScanResultEntity>[] is M){			return data.map<ScanResultEntity>((e) => ScanResultEntity().fromJson(e)).toList() as M;		}	else if(<DicDataValueEntity>[] is M){			return data.map<DicDataValueEntity>((e) => DicDataValueEntity().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResult>[] is M){			return data.map<DicDataValueScanCodeResult>((e) => DicDataValueScanCodeResult().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcode>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcode>((e) => DicDataValueScanCodeResultCqqrcode().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeTotalResult>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeTotalResult>((e) => DicDataValueScanCodeResultCqqrcodeTotalResult().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeTotalResultSafe>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeTotalResultSafe>((e) => DicDataValueScanCodeResultCqqrcodeTotalResultSafe().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeTotalResultRisky>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeTotalResultRisky>((e) => DicDataValueScanCodeResultCqqrcodeTotalResultRisky().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeTotalResultOther>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeTotalResultOther>((e) => DicDataValueScanCodeResultCqqrcodeTotalResultOther().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeHealthStatus>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeHealthStatus>((e) => DicDataValueScanCodeResultCqqrcodeHealthStatus().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeHealthStatus1>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeHealthStatus1>((e) => DicDataValueScanCodeResultCqqrcodeHealthStatus1().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeHealthStatus2>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeHealthStatus2>((e) => DicDataValueScanCodeResultCqqrcodeHealthStatus2().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeHealthStatus3>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeHealthStatus3>((e) => DicDataValueScanCodeResultCqqrcodeHealthStatus3().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeHealthStatus99>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeHealthStatus99>((e) => DicDataValueScanCodeResultCqqrcodeHealthStatus99().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeVaccinationStatus>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeVaccinationStatus>((e) => DicDataValueScanCodeResultCqqrcodeVaccinationStatus().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeVaccinationPlusStatus>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeVaccinationPlusStatus>((e) => DicDataValueScanCodeResultCqqrcodeVaccinationPlusStatus().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeLastRnaResult>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeLastRnaResult>((e) => DicDataValueScanCodeResultCqqrcodeLastRnaResult().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeTravelStatus>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeTravelStatus>((e) => DicDataValueScanCodeResultCqqrcodeTravelStatus().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeTravelStatus1>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeTravelStatus1>((e) => DicDataValueScanCodeResultCqqrcodeTravelStatus1().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeTravelStatus2>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeTravelStatus2>((e) => DicDataValueScanCodeResultCqqrcodeTravelStatus2().fromJson(e)).toList() as M;		}	else if(<DicDataValueScanCodeResultCqqrcodeTravelStatus99>[] is M){			return data.map<DicDataValueScanCodeResultCqqrcodeTravelStatus99>((e) => DicDataValueScanCodeResultCqqrcodeTravelStatus99().fromJson(e)).toList() as M;		}		throw Exception("not fond");	}  static M fromJsonAsT<M>(json) {    if (json is List) {      return _getListChildType<M>(json);    } else {      return _fromJsonSingle<M>(json) as M;    }  }}